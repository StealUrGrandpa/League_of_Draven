import requests

def get_tags(champ):
    clas = ""
    for g in data(champ, 'tags'):
        print(g)

        clas += str(champ_class.get(g)) + ", "

    return clas[:-2]
def dat(champion, what):
    url = f"https://ddragon.leagueoflegends.com/cdn/14.24.1/data/ru_RU/champion/{champion}.json"

    response = requests.get(url)
    response.raise_for_status()
    data1 = response.json()
    lore = data1.get("data", {}).get(champion, {}).get(what)
    i = lore
    print(i)


    return i


def reworked_chams(champs):

    url = f"https://ddragon.leagueoflegends.com/cdn/14.24.1/data/ru_RU/champion.json"

    response = requests.get(url)
    response.raise_for_status()
    data1 = response.json()

    key = data1.get("data", {}).get(champs, {}).get("key")

    ro = key + "/" + key + "000"

    don = f"https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/v1/champion-splashes/{ro}.jpg"

    return don


champions_by_letter = [
    ['Azir', 'Akali', 'Akshan', 'Alistar', 'Amumu', 'Anivia', 'Ahri', 'Aatrox', 'AurelionSol', 'Aphelios', 'Aurora', 'Ambessa'],
    ['Bard', 'Belveth', 'Blitzcrank', 'Briar', 'Braum', 'Brand'],
    ['Warwick', 'Varus', 'Veigar', 'Vayne', 'Vi', 'Viktor', 'Vladimir', 'Volibear'],
    ['Galio', 'Gangplank', 'Garen', 'Gwen', 'Graves', 'Gragas', 'Gnar'],
    ['Darius', 'Jax', 'JarvanIV', 'Jayce', 'Jhin', 'Jinx', 'Diana', 'DrMundo', 'Draven'],
    ['Yone'],
    ['Janna'],
    ['Zyra', 'Zac', 'Zed', 'Xerath', 'Ziggs', 'Zilean', 'Zoe'],
    ['Ivern', 'Illaoi', 'Irelia'],
    ['Khazix', 'Kayn', 'Kaisa', 'Kalista', 'Camille', 'Karma', 'Karthus', 'Kassadin', 'Cassiopeia', 'Katarina', 'Quinn', 'Kayle', 'Caitlyn', 'Kennen', 'Qiyana', 'Kindred', 'Kled', 'KogMaw', 'Corki'],
    ['Leblanc', 'Leona', 'LeeSin', 'Lillia', 'Lissandra', 'Lulu', 'Lux', 'Lucian'],
    ['Malzahar', 'Malphite', 'Maokai', 'MasterYi', 'Milio', 'MissFortune', 'Morgana', 'Mordekaiser'],
    ['Naafiri', 'Nami', 'Nasus', 'Nautilus', 'Nidalee', 'Neeko', 'Nilah', 'Nocturne', 'Nunu'],
    ['Olaf', 'Orianna', 'Ornn'],
    ['Pyke', 'Pantheon', 'Poppy'],
    ['Ryze', 'Rumble', 'Rammus', 'Rakan', 'RekSai', 'Renata', 'Rengar', 'Renekton', 'Riven', 'Rell'],
    ['Sylas', 'Samira', 'Swain', 'Sejuani', 'Senna', 'Seraphine', 'Sett', 'Sivir', 'Syndra', 'Sion', 'Sona', 'Soraka','Shaco', 'Xayah', 'Shen', 'Shyvana', 'Smolder'],
    ['Talon', 'Taric', 'TwistedFate', 'Twitch', 'Teemo', 'Trundle', 'Thresh', 'Tryndamere', 'Tristana'],
    ['Udyr', 'Urgot'],
    ['Fiddlesticks', 'Fizz', 'Fiora'],
    ['Hwei', 'Heimerdinger'],
    ['Evelynn', 'Ezreal', 'Ekko', 'Elise', 'Annie'],
    ['Yuumi'],
]

champ_class = {
    'Tank': '–¢–∞–Ω–∫',
    'Support': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
    'Marksman': '–°—Ç—Ä–µ–ª–æ–∫',
    'Mage': '–ú–∞–≥',
    'Fighter': '–í–æ–∏–Ω',
    'Assassin': '–£–±–∏–π—Ü–∞'
}

letter_to_number = {
    '–∞': 0, '–±': 1, '–≤': 2, '–≥': 3, '–¥': 4, '–µ': 5, '—ë': 5, '–∂': 6, '–∑': 7, '–∏': 8,
    '–∫': 9, '–ª': 10, '–º': 11, '–Ω': 12, '–æ': 13, '–ø': 14, '—Ä': 15, '—Å': 16, '—Ç': 17,
    '—É': 18, '—Ñ': 19, '—Ö': 20, '—ç': 21, '—é': 22
}

ru_to_en = {
    '–∞–º–±–µ—Å—Å–∞':'Ambessa',
    '–∞–∑–∏—Ä': 'Azir',
    '–∞–≤—Ä–æ—Ä–∞':'Aurora',
    '–∞–∫–∞–ª–∏': 'Akali',
    '–∞–∫—à–∞–Ω': 'Akshan',
    '–∞–ª–∏—Å—Ç–∞—Ä': 'Alistar',
    '–∞–º—É–º—É': 'Amumu',
    '–∞–Ω–∏–≤–∏—è': 'Anivia',
    '–∞—Ä–∏': 'Ahri',
    '–∞—Ç—Ä–æ–∫—Å': 'Aatrox',
    '–∞—É—Ä–µ–ª–∏–æ–Ω —Å–æ–ª': 'AurelionSol',
    '–∞—Ñ–µ–ª–∏–π': 'Aphelios',
    '–±–∞—Ä–¥': 'Bard',
    '–±–µ–ª –≤–µ—Ç': 'Belveth',
    '–±–ª–∏—Ü–∫—Ä–∞–Ω–∫': 'Blitzcrank',
    '–±—Ä–∏–∞—Ä': 'Briar',
    '–±—Ä–∞—É–º': 'Braum',
    '–±—Ä—ç–Ω–¥': 'Brand',
    '–≤–∞—Ä–≤–∏–∫': 'Warwick',
    '–≤–∞—Ä—É—Å': 'Varus',
    '–≤–µ–π–≥–∞—Ä': 'Veigar',
    '–≤–µ–π–Ω': 'Vayne',
    '–≤–∞–π': 'Vi',
    '–≤–∏–∫—Ç–æ—Ä': 'Viktor',
    '–≤–ª–∞–¥–∏–º–∏—Ä': 'Vladimir',
    '–≤–æ–ª–∏–±–∏—Ä': 'Volibear',
    '–≥–∞–ª–∏–æ': 'Galio',
    '–≥–∞–Ω–≥–ø–ª–∞–Ω–∫': 'Gangplank',
    '–≥–∞—Ä–µ–Ω': 'Garen',
    '–≥–≤–µ–Ω': 'Gwen',
    '–≥—Ä–µ–π–≤–∑': 'Graves',
    '–≥—Ä–∞–≥–∞—Å': 'Gragas',
    '–≥–Ω–∞—Ä': 'Gnar',
    '–¥–∞—Ä–∏—É—Å': 'Darius',
    '–¥–∂–∞–∫—Å': 'Jax',
    '–¥–∂–∞—Ä–≤–∞–Ω iv': 'JarvanIV',
    '–¥–∂–µ–πc': 'Jayce',
    '–¥–∂–∏–Ω': 'Jhin',
    '–¥–∂–∏–Ω–∫—Å': 'Jinx',
    '–¥–∏–∞–Ω–∞': 'Diana',
    '–¥–æ–∫—Ç–æ—Ä –º—É–Ω–¥–æ': 'DrMundo',
    '–¥—Ä–µ–π–≤–µ–Ω': 'Draven',
    '—ë–Ω—ç': 'Yone',
    '–∂–∞–Ω–Ω–∞': 'Janna',
    '–∑–∞–π—Ä–∞': 'Zyra',
    '–∑–∞–∫': 'Zac',
    '–∑–µ–¥': 'Zed',
    '–∑–µ—Ä–∞—Ç': 'Xerath',
    '–∑–∏–≥–≥—Å': 'Ziggs',
    '–∑–∏–ª–µ–∞–Ω': 'Zilean',
    '–∑–æ–∏': 'Zoe',
    '–∏–≤–µ—Ä–Ω': 'Ivern',
    '–∏–ª–ª–∞–æ–π': 'Illaoi',
    '–∏—Ä–µ–ª–∏—è': 'Irelia',
    '–∫–∞–∑–∏–∫—Å': 'Khazix',
    '–∫–∞–∏–Ω': 'Kayn',
    '–∫–∞–π—Å–∞': 'Kaisa',
    '–∫–∞–ª–∏—Å—Ç–∞': 'Kalista',
    '–∫–∞–º–∏–ª–ª–∞': 'Camille',
    '–∫–∞—Ä–º–∞': 'Karma',
    '–∫–∞—Ä—Ç—É—Å': 'Karthus',
    '–∫–∞—Å—Å–∞–¥–∏–Ω': 'Kassadin',
    '–∫–∞—Å—Å–∏–æ–ø–µ—è': 'Cassiopeia',
    '–∫–∞—Ç–∞—Ä–∏–Ω–∞': 'Katarina',
    '–∫–≤–∏–Ω–Ω': 'Quinn',
    '–∫–µ–π–ª': 'Kayle',
    '–∫–µ–π—Ç–ª–∏–Ω': 'Caitlyn',
    '–∫–µ–Ω–Ω–µ–Ω': 'Kennen',
    '–∫–∏–∞–Ω–∞': 'Qiyana',
    '–∫–∏–Ω–¥—Ä–µ–¥': 'Kindred',
    '–∫–ª–µ–¥': 'Kled',
    '–∫–æ–≥–º–∞–æ': 'KogMaw',
    '–∫–æ—Ä–∫–∏': 'Corki',
    '–ª–µ –±–ª–∞–Ω': 'Leblanc',
    '–ª–µ–æ–Ω–∞': 'Leona',
    '–ª–∏ —Å–∏–Ω': 'LeeSin',
    '–ª–∏–ª–ª–∏—è': 'Lillia',
    '–ª–∏—Å—Å–∞–Ω–¥—Ä–∞': 'Lissandra',
    '–ª—É–ª—É': 'Lulu',
    '–ª—é–∫—Å': 'Lux',
    '–ª—é—Ü–∏–∞–Ω': 'Lucian',
    '–º–∞–ª—å–∑–∞—Ö–∞—Ä': 'Malzahar',
    '–º–∞–ª—å—Ñ–∏—Ç': 'Malphite',
    '–º–∞–æ–∫–∞–π': 'Maokai',
    '–º–∞—Å—Ç–µ—Ä –π–∏': 'MasterYi',
    '–º–∏–ª–∏–æ': 'Milio',
    '–º–∏—Åc —Ñ–æ—Ä—Ç—É–Ω–∞': 'MissFortune',
    '–º–æ—Ä–≥–∞–Ω–∞': 'Morgana',
    '–º–æ—Ä–¥–µ–∫–∞–π–∑–µ—Ä': 'Mordekaiser',
    '–Ω–∞–∞—Ñ–∏—Ä–∏': 'Naafiri',
    '–Ω–∞–º–∏': 'Nami',
    '–Ω–∞—Å—É—Å': 'Nasus',
    '–Ω–∞—É—Ç–∏–ª—É—Å': 'Nautilus',
    '–Ω–∏–¥–∞–ª–∏': 'Nidalee',
    '–Ω–∏–∫–æ': 'Neeko',
    '–Ω–∏–ª–∞': 'Nilah',
    '–Ω–æ–∫—Ç—é—Ä–Ω': 'Nocturne',
    '–Ω—É–Ω—É': 'Nunu',
    '–æ–ª–∞—Ñ': 'Olaf',
    '–æ—Ä–∏–∞–Ω–Ω–∞': 'Orianna',
    '–æ—Ä–Ω': 'Ornn',
    '–ø–∞–π–∫': 'Pyke',
    '–ø–∞–Ω—Ç–µ–æ–Ω': 'Pantheon',
    '–ø–æ–ø–ø–∏': 'Poppy',
    '—Ä–∞–π–∑': 'Ryze',
    '—Ä–∞–º–±–ª': 'Rumble',
    '—Ä–∞–º–º—É—Å': 'Rammus',
    '—Ä—ç–π–∫–∞–Ω': 'Rakan',
    '—Ä–µ–∫ —Å–∞–π': 'RekSai',
    '—Ä–µ–Ω–∞—Ç–∞': 'Renata',
    '—Ä–µ–Ω–≥–∞—Ä': 'Rengar',
    '—Ä–µ–Ω–µ–∫—Ç–æ–Ω': 'Renekton',
    '—Ä–∏–≤–µ–Ω': 'Riven',
    '—Ä–µ–ª–ª': 'Rell',
    '—Å–∞–π–ª–∞—Å': 'Sylas',
    '—Å–∞–º–∏—Ä–∞': 'Samira',
    '—Å–≤–µ–π–Ω': 'Swain',
    '—Å–µ–¥–∂—É–∞–Ω–∏': 'Sejuani',
    '—Å–µ–Ω–Ω–∞': 'Senna',
    '—Å–µ—Ä–∞—Ñ–∏–Ω–∞': 'Seraphine',
    '—Å–µ—Ç—Ç': 'Sett',
    '—Å–∏–≤–∏—Ä': 'Sivir',
    '—Å–∏–Ω–¥—Ä–∞': 'Syndra',
    '—Å–∏–æ–Ω': 'Sion',
    '—Å–æ–Ω–∞': 'Sona',
    '—Å–æ—Ä–∞–∫–∞': 'Soraka',
    '—à–∞–∫–æ': 'Shaco',
    '—à–∞—è': 'Xayah',
    '—à–µ–Ω': 'Shen',
    '—à–∏–≤–∞–Ω–∞': 'Shyvana',
    '—Å–º–æ–ª–¥–µ—Ä': 'Smolder',
    '—Ç–∞–ª–æ–Ω': 'Talon',
    '—Ç–∞—Ä–∏–∫': 'Taric',
    '—Ç–≤–∏—Ç–µ–¥ —Ñ—ç–π—Ç': 'TwistedFate',
    '—Ç–≤–∏—Ç—á': 'Twitch',
    '—Ç–∏–º–æ': 'Teemo',
    '—Ç—Ä–∞–Ω–¥–ª': 'Trundle',
    '—Ç—Ä–µ—à': 'Thresh',
    '—Ç—Ä–∏–Ω–¥–∞–º–∏—Ä': 'Tryndamere',
    '—Ç—Ä–∏—Å—Ç–∞–Ω–∞': 'Tristana',
    '—É–¥–∏—Ä': 'Udyr',
    '—É—Ä–≥–æ—Ç': 'Urgot',
    '—Ñ–∏–¥–¥–ª—Å—Ç–∏–∫—Å': 'Fiddlesticks',
    '—Ñ–∏–∑–∑': 'Fizz',
    '—Ñ–∏–æ—Ä–∞': 'Fiora',
    '—Ö–µ–π–º–µ—Ä–¥–∏–Ω–≥–µ—Ä': 'Heimerdinger',
    '—ç–≤–µ–ª–∏–Ω–Ω': 'Evelynn',
    '—ç–∑—Ä–µ–∞–ª—å': 'Ezreal',
    '—ç–∫–∫–æ': 'Ekko',
    '—ç–ª–∏–∑–∞': 'Elise',
    '—ç–Ω–Ω–∏': 'Annie',
    '—é–º–∏': 'Yuumi'
}


def find_letter(letter):
    list = []
    for key in ru_to_en:
        if key.startswith(letter):
            list.append(key)
    return list









async def inline_query(update, context):

    global result_id, ur, clas
    global mes_id
    query = update.inline_query.query
    results = []
    ur = ''
    clas = ""



    if query[:1] in letter_to_number.keys():
        index = letter_to_number[query[:1]]

        jj = champions_by_letter[index]

        for full in jj:
            if full in ru_to_en.values():
                en_word = ru_to_en[full].values()
                if query in ru_to_en[full].values():
                    if full in chams:
                        ur = full
                        dd = reworked_chams(ur)

                    else:
                        dd = f"https://ddragon.leagueoflegends.com/cdn/img/champion/splash/{ur}_0.jpg"
            else:
                print('no')

            results.append(
                InlineQueryResultArticle(
                    input_message_content=InputTextMessageContent(
                        f"*{data(ur, 'name').title()}* \n\n*–õ–æ—Ä*üí¨: {data(ur, 'lore')}\n\n–ö–ª–∞—Å—Å: {get_tags(ur)}\n\n{dd}"),
                    id=ur + str(random()),
                    title=data(ur, "name").title(),
                    description=data(ur, "title"),
                    thumbnail_url=f"https://ddragon.leagueoflegends.com/cdn/14.24.1/img/champion/{ur}.png",

                )
            )
    await update.inline_query.answer(results, cache_time=1)





async def inline_query(update, context):
    query = update.inline_query.query.lower()  # Convert to lowercase for case-insensitive search
    results = []

    # Find all potential matches that start with the query string
    potential_matches = [key for key in ru_to_en if key.startswith(query)]

    if potential_matches:
        for match in potential_matches:
            ur = ru_to_en[match]
            full = ur

            dd = reworked_chams(ur) if ur in chams else f"https://ddragon.leagueoflegends.com/cdn/img/champion/splash/{ur}_0.jpg"

            results.append(
                InlineQueryResultArticle(
                    input_message_content=InputTextMessageContent(
                        f"*{data(ur, 'name').title()}* \n\n*–õ–æ—Ä*üí¨: {data(ur, 'lore')}\n\n–ö–ª–∞—Å—Å: {get_tags(ur)}\n\n{dd}"
                    ),
                    id=ur + str(random()),
                    title=data(ur, "name").title(),
                    description=data(ur, "title"),
                    thumbnail_url=f"https://ddragon.leagueoflegends.com/cdn/14.24.1/img/champion/{ur}.png",
                )
            )
    else:
        print(f"No match for: {query}")

    await update.inline_query.answer(results, cache_time=1)

    last_query_time = 0
    DEBOUNCE_DELAY = 1

    async def inline_query(update: Update, context):
        global last_query_time
        global ur, clas, mes_id

        query = update.inline_query.query
        ur = ''
        clas = ''

        current_time = time()

        # Debounce mechanism: Skip processing if typing/removing letters too quickly
        if current_time - last_query_time < DEBOUNCE_DELAY:
            last_query_time = current_time  # Update the last query time
            return  # Do nothing until user stops typing for the debounce period

        # Proceed if debounce delay has passed
        if query:
            last_query_time = current_time

            loading_result = InlineQueryResultArticle(
                input_message_content=InputTextMessageContent(
                    "üîç Searching... Please wait!"
                ),
                id="loading",  # This can be any unique value
                title="Searching...",
                description="Searching for champions...",
            )

            # Send the loading result to the user

            results = []
            champ_list = find_letter(query[:1])
            for ru in champ_list:
                if ru.startswith(query):
                    en_word = ru_to_en[ru]
                    ur = en_word

                    if en_word in chams:
                        dd = reworked_chams(ur)
                    else:
                        dd = f"https://ddragon.leagueoflegends.com/cdn/img/champion/splash/{ur}_0.jpg"

                    # Add result to the list
                    results.append(
                        InlineQueryResultArticle(
                            input_message_content=InputTextMessageContent(
                                f"*{data(ur, 'name').title()}* \n\n*–õ–æ—Ä*üí¨: {data(ur, 'lore')}\n\n–ö–ª–∞—Å—Å: {get_tags(ur)}\n\n{dd}"
                            ),
                            id=ur + str(random()),
                            title=data(ur, "name").title(),
                            description=data(ur, "title"),
                            thumbnail_url=f"https://ddragon.leagueoflegends.com/cdn/14.24.1/img/champion/{ur}.png",
                        )
                    )
                else:
                    print('no match')

            await update.inline_query.answer(results, cache_time=1)